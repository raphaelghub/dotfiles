# Parse command line arguments
local full_flag="--full"  # Default to full details
local author="@me"

# Process arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --brief)
            full_flag=""  # Remove full flag for brief mode
            shift
            ;;
        *)
            author="$1"
            shift
            ;;
    esac
done

local author_display="$author"

# Make display more user-friendly
if [ "$author" = "@me" ]; then
    author_display="your"
else
    author_display="$author's"
fi

# Show fetching status with smart_gum spin
smart_gum spin --spinner dot --title "Fetching $author_display pull requests..." -- bash -c "
    # Get open PRs
    open_prs=\$(gh pr list --author '$author' --limit 100 --json number,title,state --jq '.[] | \"\(.number)|\(.title)|open\"')

    # Get merged PRs from last 7 days
    merged_prs=\$(gh pr list --author '$author' --state merged --limit 100 --json number,title,mergedAt | jq -r --arg date \"\$(date -u -d '7 days ago' '+%Y-%m-%d' 2>/dev/null || date -u -v-7d '+%Y-%m-%d')\" '.[] | select(.mergedAt >= \$date) | \"\(.number)|\(.title)|merged\"')

    # Save to temp file - merged PRs first
    echo \"\$merged_prs\" > /tmp/pr_list_$$
    echo \"\$open_prs\" >> /tmp/pr_list_$$
"

# Read the PR list from temp file
pr_data=$(cat /tmp/pr_list_$$ 2>/dev/null | grep -v '^$')
rm -f /tmp/pr_list_$$

if [ -z "$pr_data" ]; then
    smart_gum style --foreground 196 "No pull requests found for $author"
    return 1
fi

# Format PRs for display
pr_display_list=""
pr_mapping=()

while IFS='|' read -r number title pr_status; do
    if [ -n "$number" ]; then
        # Color code based on status
        if [ "$pr_status" = "open" ]; then
            formatted_pr=$(smart_gum style --foreground 214 "PR #$number") # Orange for open
            status_badge=$(smart_gum style --foreground 214 --bold "[OPEN]")
        else
            formatted_pr=$(smart_gum style --foreground 34 "PR #$number") # Blue for merged
            status_badge=$(smart_gum style --foreground 34 --bold "[MERGED]")
        fi

        display_line="$formatted_pr $title $status_badge"
        if [ -n "$pr_display_list" ]; then
            pr_display_list="$pr_display_list\n$display_line"
        else
            pr_display_list="$display_line"
        fi
        pr_mapping+=("$number|$title")
    fi
done <<< "$pr_data"

# Show header with mode indication
local header_text="Select PRs to check shipping status for $author_display PRs"
if [ -z "$full_flag" ]; then
    header_text="$header_text (brief mode)"
fi

smart_gum style \
    --border normal \
    --margin "1" \
    --padding "1" \
    --border-foreground 212 \
    "$header_text"

# Let user select a single PR
selected_pr=$(echo -e "$pr_display_list" | smart_gum choose --height 15 --header "Use arrow keys to navigate, enter to select:")

if [ -z "$selected_pr" ]; then
    smart_gum style --foreground 196 "No PR selected"
    return 0
fi

# Extract PR number from selection
pr_number=$(echo "$selected_pr" | grep -o 'PR #[0-9]*' | cut -d'#' -f2)

# Show status header
local status_header="Checking shipping status..."
if [ -z "$full_flag" ]; then
    status_header="Checking shipping status (brief mode)..."
fi

smart_gum style \
    --border double \
    --margin "1" \
    --padding "1" \
    --border-foreground 212 \
    --bold \
    "$status_header"

# Find the full PR info
pr_info=""
for mapping in "${pr_mapping[@]}"; do
    if [[ "$mapping" == "$pr_number|"* ]]; then
        pr_info="$mapping"
        break
    fi
done

if [ -n "$pr_info" ]; then
    IFS='|' read -r number title <<< "$pr_info"

    # Show PR header
    smart_gum style \
        --foreground 212 \
        --bold \
        --margin "1 0 0 0" \
        "PR #$number: $title"

    smart_gum style --foreground 240 "────────────────────────────────────────"

    # Check shipping status with optional --full flag
    shadowenv exec -- /opt/dev/bin/dev conveyor is-it-shipped "$pr_number" $full_flag

    echo # Add spacing
fi
