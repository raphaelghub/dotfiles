local action=""
local zone=""
local tree=""

# Parse arguments for direct usage
while [[ $# -gt 0 ]]; do
  case $1 in
    list|ls)
      dev tree list
      return
      ;;
    remove|rm)
      if [ -n "$2" ]; then
        dev tree remove "$2"
      else
        # Interactive tree removal
        local trees=$(dev tree list 2>/dev/null | grep -v "Available trees:" | grep -v "^$")
        if [ -n "$trees" ]; then
          local tree_to_remove=$(echo "$trees" | smart_gum choose --header "🗑️ Select tree to remove:")
          if [ -n "$tree_to_remove" ]; then
            # Extract just the tree name from the formatted output
            # Remove leading/trailing whitespace and extract the tree name
            local clean_tree_name=$(echo "$tree_to_remove" | sed 's/^[[:space:]]*\*[[:space:]]*//' | awk '{print $1}')
            if smart_gum confirm "Remove tree '$clean_tree_name'?"; then
              dev tree remove "$clean_tree_name"
            fi
          fi
        else
          smart_gum style --foreground 196 "❌ No trees found to remove"
        fi
      fi
      return
      ;;
    -h|--help)
      echo "Usage: devtree [COMMAND] [OPTIONS]"
      echo ""
      echo "Commands:"
      echo "  list, ls              List available trees"
      echo "  remove, rm [TREE]     Remove a tree (interactive if no tree specified)"
      echo "  -h, --help           Show this help"
      echo ""
      echo "Interactive mode (no arguments):"
      echo "  - Create new worktree: dev cd <zone> -t <tree>"
      echo "  - Switch zones: dev cd <zone> -t ."
      echo ""
      echo "Examples:"
      echo "  devtree                    # Interactive mode"
      echo "  devtree list              # List all trees"
      echo "  devtree remove my-tree    # Remove specific tree"
      return
      ;;
    *)
      # If two arguments provided, assume it's zone and tree
      if [ -z "$zone" ]; then
        zone="$1"
      elif [ -z "$tree" ]; then
        tree="$1"
      fi
      shift
      ;;
  esac
done

# If zone and tree provided directly
if [ -n "$zone" ] && [ -n "$tree" ]; then
  dev cd "$zone" -t "$tree"
  return
fi

# Interactive mode
local operation=$(smart_gum choose \
  "🌳 Create new worktree" \
  "🔄 Switch to existing zone" \
  "📋 List available trees" \
  "🗑️ Remove a tree" \
  --header "🏗️ Worktree Operations:")

if [ -z "$operation" ]; then
  smart_gum style --foreground 196 "❌ No operation selected"
  return 1
fi

case "$operation" in
  "🌳 Create new worktree")
    # Get available zones from areas directory
    local zones_dir="$HOME/world/trees/root/src/areas"
    local zones=()

    if [ -d "$zones_dir" ]; then
      while IFS= read -r zone_path; do
        # Extract just the zone name (part after the last slash)
        local zone_name="${zone_path##*/}"
        zones+=("$zone_name")
      done < <(find "$zones_dir" -type d -mindepth 1 -maxdepth 2 | sed 's|.*/src/areas/||' | grep -v '^\.' | sort)
    fi

    # Fallback zones if directory not found (use just zone names)
    if [ ${#zones[@]} -eq 0 ]; then
      zones=("admin-web" "shopify" "billing" "organizations")
    fi

    local selected_zone=$(printf '%s\n' "${zones[@]}" | smart_gum choose --header "🎯 Select zone:")

    if [ -z "$selected_zone" ]; then
      smart_gum style --foreground 196 "❌ No zone selected"
      return 1
    fi

    # Get tree name
    local tree_name=$(smart_gum input --placeholder "Enter tree name (e.g., feature-branch, bug-fix)" --header "🌿 Tree name:")

    if [ -z "$tree_name" ]; then
      smart_gum style --foreground 196 "❌ Tree name is required"
      return 1
    fi

    # Show what will be executed
    smart_gum style \
      --border normal \
      --margin "1" \
      --padding "1" \
      --border-foreground 212 \
      "🌳 Creating new worktree:" \
      "Zone: $selected_zone" \
      "Tree: $tree_name" \
      "" \
      "Command: dev cd $selected_zone -t $tree_name"

    # Confirm and execute
    if smart_gum confirm "Create worktree?"; then
      dev cd "$selected_zone" -t "$tree_name"
    else
      smart_gum style --foreground 196 "❌ Operation cancelled"
    fi
    ;;

  "🔄 Switch to existing zone")
    # Get available zones
    local zones_dir="$HOME/world/trees/root/src/areas"
    local zones=()

    if [ -d "$zones_dir" ]; then
      while IFS= read -r zone_path; do
        # Extract just the zone name (part after the last slash)
        local zone_name="${zone_path##*/}"
        zones+=("$zone_name")
      done < <(find "$zones_dir" -type d -mindepth 1 -maxdepth 2 | sed 's|.*/src/areas/||' | grep -v '^\.' | sort)
    fi

    if [ ${#zones[@]} -eq 0 ]; then
      zones=("admin-web" "shopify" "billing" "organizations")
    fi

    local selected_zone=$(printf '%s\n' "${zones[@]}" | smart_gum choose --header "🎯 Select zone to switch to:")

    if [ -z "$selected_zone" ]; then
      smart_gum style --foreground 196 "❌ No zone selected"
      return 1
    fi

    smart_gum style \
      --border normal \
      --margin "1" \
      --padding "1" \
      --border-foreground 212 \
      "🔄 Switching to zone:" \
      "Zone: $selected_zone" \
      "" \
      "Command: dev cd $selected_zone -t ."

    dev cd "$selected_zone" -t .
    ;;

  "📋 List available trees")
    smart_gum style \
      --border normal \
      --margin "1" \
      --padding "1" \
      --border-foreground 212 \
      "📋 Available trees:"

    dev tree list
    ;;

  "🗑️ Remove a tree")
    local trees=$(dev tree list 2>/dev/null | grep -v "Available trees:" | grep -v "^$")

    if [ -z "$trees" ]; then
      smart_gum style --foreground 196 "❌ No trees found to remove"
      return 1
    fi

    local tree_to_remove=$(echo "$trees" | smart_gum choose --header "🗑️ Select tree to remove:")

    if [ -z "$tree_to_remove" ]; then
      smart_gum style --foreground 196 "❌ No tree selected"
      return 1
    fi

    # Extract just the tree name from the formatted output
    # Remove leading/trailing whitespace and extract the tree name
    local clean_tree_name=$(echo "$tree_to_remove" | sed 's/^[[:space:]]*\*[[:space:]]*//' | awk '{print $1}')

    smart_gum style \
      --border normal \
      --margin "1" \
      --padding "1" \
      --border-foreground 196 \
      "⚠️ About to remove tree:" \
      "Tree: $clean_tree_name" \
      "" \
      "Command: dev tree remove $clean_tree_name"

    if smart_gum confirm "Remove tree '$clean_tree_name'?"; then
      dev tree remove "$clean_tree_name"
    else
      smart_gum style --foreground 196 "❌ Operation cancelled"
    fi
    ;;
esac
